// tslint:disable
/**
 * Echo Forum
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { TopicCreate } from '../models';
// @ts-ignore
import { TopicEdit } from '../models';
// @ts-ignore
import { TopicInfo } from '../models';
/**
 * TopicApi - axios parameter creator
 * @export
 */
export const TopicApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create new topic
         * @param {TopicCreate} [topicCreate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        topicCreatePut: async (topicCreate?: TopicCreate, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/topic/create`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=utf-8';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof topicCreate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(topicCreate !== undefined ? topicCreate : {}) : (topicCreate || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create new topic
         * @param {TopicCreate} [topicCreate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        topicCreatePut_1: async (topicCreate?: TopicCreate, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/topic/create`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=utf-8';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof topicCreate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(topicCreate !== undefined ? topicCreate : {}) : (topicCreate || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete topic
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        topicDeleteDelete: async (body?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/topic/delete`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=utf-8';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete topic
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        topicDeleteDelete_2: async (body?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/topic/delete`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=utf-8';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit topic
         * @param {TopicEdit} [topicEdit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        topicEditPatch: async (topicEdit?: TopicEdit, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/topic/edit`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=utf-8';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof topicEdit !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(topicEdit !== undefined ? topicEdit : {}) : (topicEdit || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit topic
         * @param {TopicEdit} [topicEdit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        topicEditPatch_3: async (topicEdit?: TopicEdit, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/topic/edit`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=utf-8';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof topicEdit !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(topicEdit !== undefined ? topicEdit : {}) : (topicEdit || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Query topic info
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        topicQueryPost: async (body?: object, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/topic/query`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=utf-8';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Query topic info
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        topicQueryPost_4: async (body?: object, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/topic/query`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=utf-8';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TopicApi - functional programming interface
 * @export
 */
export const TopicApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create new topic
         * @param {TopicCreate} [topicCreate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async topicCreatePut(topicCreate?: TopicCreate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await TopicApiAxiosParamCreator(configuration).topicCreatePut(topicCreate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Create new topic
         * @param {TopicCreate} [topicCreate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async topicCreatePut_1(topicCreate?: TopicCreate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await TopicApiAxiosParamCreator(configuration).topicCreatePut_1(topicCreate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete topic
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async topicDeleteDelete(body?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await TopicApiAxiosParamCreator(configuration).topicDeleteDelete(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete topic
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async topicDeleteDelete_2(body?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await TopicApiAxiosParamCreator(configuration).topicDeleteDelete_2(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Edit topic
         * @param {TopicEdit} [topicEdit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async topicEditPatch(topicEdit?: TopicEdit, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await TopicApiAxiosParamCreator(configuration).topicEditPatch(topicEdit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Edit topic
         * @param {TopicEdit} [topicEdit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async topicEditPatch_3(topicEdit?: TopicEdit, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await TopicApiAxiosParamCreator(configuration).topicEditPatch_3(topicEdit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Query topic info
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async topicQueryPost(body?: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TopicInfo>>> {
            const localVarAxiosArgs = await TopicApiAxiosParamCreator(configuration).topicQueryPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Query topic info
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async topicQueryPost_4(body?: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TopicInfo>>> {
            const localVarAxiosArgs = await TopicApiAxiosParamCreator(configuration).topicQueryPost_4(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TopicApi - factory interface
 * @export
 */
export const TopicApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Create new topic
         * @param {TopicCreate} [topicCreate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        topicCreatePut(topicCreate?: TopicCreate, options?: any): AxiosPromise<string> {
            return TopicApiFp(configuration).topicCreatePut(topicCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create new topic
         * @param {TopicCreate} [topicCreate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        topicCreatePut_1(topicCreate?: TopicCreate, options?: any): AxiosPromise<string> {
            return TopicApiFp(configuration).topicCreatePut_1(topicCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete topic
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        topicDeleteDelete(body?: string, options?: any): AxiosPromise<number> {
            return TopicApiFp(configuration).topicDeleteDelete(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete topic
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        topicDeleteDelete_2(body?: string, options?: any): AxiosPromise<number> {
            return TopicApiFp(configuration).topicDeleteDelete_2(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edit topic
         * @param {TopicEdit} [topicEdit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        topicEditPatch(topicEdit?: TopicEdit, options?: any): AxiosPromise<number> {
            return TopicApiFp(configuration).topicEditPatch(topicEdit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edit topic
         * @param {TopicEdit} [topicEdit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        topicEditPatch_3(topicEdit?: TopicEdit, options?: any): AxiosPromise<number> {
            return TopicApiFp(configuration).topicEditPatch_3(topicEdit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Query topic info
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        topicQueryPost(body?: object, options?: any): AxiosPromise<Array<TopicInfo>> {
            return TopicApiFp(configuration).topicQueryPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Query topic info
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        topicQueryPost_4(body?: object, options?: any): AxiosPromise<Array<TopicInfo>> {
            return TopicApiFp(configuration).topicQueryPost_4(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TopicApi - object-oriented interface
 * @export
 * @class TopicApi
 * @extends {BaseAPI}
 */
export class TopicApi extends BaseAPI {
    /**
     * 
     * @summary Create new topic
     * @param {TopicCreate} [topicCreate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopicApi
     */
    public topicCreatePut(topicCreate?: TopicCreate, options?: any) {
        return TopicApiFp(this.configuration).topicCreatePut(topicCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create new topic
     * @param {TopicCreate} [topicCreate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopicApi
     */
    public topicCreatePut_1(topicCreate?: TopicCreate, options?: any) {
        return TopicApiFp(this.configuration).topicCreatePut_1(topicCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete topic
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopicApi
     */
    public topicDeleteDelete(body?: string, options?: any) {
        return TopicApiFp(this.configuration).topicDeleteDelete(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete topic
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopicApi
     */
    public topicDeleteDelete_2(body?: string, options?: any) {
        return TopicApiFp(this.configuration).topicDeleteDelete_2(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Edit topic
     * @param {TopicEdit} [topicEdit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopicApi
     */
    public topicEditPatch(topicEdit?: TopicEdit, options?: any) {
        return TopicApiFp(this.configuration).topicEditPatch(topicEdit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Edit topic
     * @param {TopicEdit} [topicEdit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopicApi
     */
    public topicEditPatch_3(topicEdit?: TopicEdit, options?: any) {
        return TopicApiFp(this.configuration).topicEditPatch_3(topicEdit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Query topic info
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopicApi
     */
    public topicQueryPost(body?: object, options?: any) {
        return TopicApiFp(this.configuration).topicQueryPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Query topic info
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopicApi
     */
    public topicQueryPost_4(body?: object, options?: any) {
        return TopicApiFp(this.configuration).topicQueryPost_4(body, options).then((request) => request(this.axios, this.basePath));
    }

}
