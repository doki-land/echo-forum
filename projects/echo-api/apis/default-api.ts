// tslint:disable
/**
 * Skadi Documention Generator
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DocumentInfo } from '../models';
// @ts-ignore
import { DocumentQueryByPath } from '../models';
// @ts-ignore
import { HomeStatistics } from '../models';
// @ts-ignore
import { PackageDetail } from '../models';
// @ts-ignore
import { PackageQueryByName } from '../models';
// @ts-ignore
import { PackageVersion } from '../models';
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary /document/query
         * @param {DocumentQueryByPath} [documentQueryByPath] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentQueryPost: async (documentQueryByPath?: DocumentQueryByPath, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/document/query`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof documentQueryByPath !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(documentQueryByPath !== undefined ? documentQueryByPath : {}) : (documentQueryByPath || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary /home/statistics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        homeStatisticsGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/home/statistics`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary /package/find
         * @param {PackageQueryByName} [packageQueryByName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        packageFindPost: async (packageQueryByName?: PackageQueryByName, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/package/find`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof packageQueryByName !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(packageQueryByName !== undefined ? packageQueryByName : {}) : (packageQueryByName || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary /package/versions
         * @param {PackageQueryByName} [packageQueryByName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        packageVersionsPost: async (packageQueryByName?: PackageQueryByName, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/package/versions`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof packageQueryByName !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(packageQueryByName !== undefined ? packageQueryByName : {}) : (packageQueryByName || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary /document/query
         * @param {DocumentQueryByPath} [documentQueryByPath] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentQueryPost(documentQueryByPath?: DocumentQueryByPath, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentInfo>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).documentQueryPost(documentQueryByPath, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary /home/statistics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async homeStatisticsGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HomeStatistics>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).homeStatisticsGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary /package/find
         * @param {PackageQueryByName} [packageQueryByName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async packageFindPost(packageQueryByName?: PackageQueryByName, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PackageDetail>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).packageFindPost(packageQueryByName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary /package/versions
         * @param {PackageQueryByName} [packageQueryByName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async packageVersionsPost(packageQueryByName?: PackageQueryByName, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PackageVersion>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).packageVersionsPost(packageQueryByName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary /document/query
         * @param {DocumentQueryByPath} [documentQueryByPath] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentQueryPost(documentQueryByPath?: DocumentQueryByPath, options?: any): AxiosPromise<DocumentInfo> {
            return DefaultApiFp(configuration).documentQueryPost(documentQueryByPath, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary /home/statistics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        homeStatisticsGet(options?: any): AxiosPromise<HomeStatistics> {
            return DefaultApiFp(configuration).homeStatisticsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary /package/find
         * @param {PackageQueryByName} [packageQueryByName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        packageFindPost(packageQueryByName?: PackageQueryByName, options?: any): AxiosPromise<PackageDetail> {
            return DefaultApiFp(configuration).packageFindPost(packageQueryByName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary /package/versions
         * @param {PackageQueryByName} [packageQueryByName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        packageVersionsPost(packageQueryByName?: PackageQueryByName, options?: any): AxiosPromise<Array<PackageVersion>> {
            return DefaultApiFp(configuration).packageVersionsPost(packageQueryByName, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary /document/query
     * @param {DocumentQueryByPath} [documentQueryByPath] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public documentQueryPost(documentQueryByPath?: DocumentQueryByPath, options?: any) {
        return DefaultApiFp(this.configuration).documentQueryPost(documentQueryByPath, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary /home/statistics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public homeStatisticsGet(options?: any) {
        return DefaultApiFp(this.configuration).homeStatisticsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary /package/find
     * @param {PackageQueryByName} [packageQueryByName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public packageFindPost(packageQueryByName?: PackageQueryByName, options?: any) {
        return DefaultApiFp(this.configuration).packageFindPost(packageQueryByName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary /package/versions
     * @param {PackageQueryByName} [packageQueryByName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public packageVersionsPost(packageQueryByName?: PackageQueryByName, options?: any) {
        return DefaultApiFp(this.configuration).packageVersionsPost(packageQueryByName, options).then((request) => request(this.axios, this.basePath));
    }

}
